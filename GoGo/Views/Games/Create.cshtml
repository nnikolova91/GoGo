@*@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper*@
@using X.PagedList
@using X.PagedList.Mvc.Core
@model ViewModels.CreateGameViewModel
@using ViewModels
@{
    //ViewData["Title"] = "Create";
}

<main class="mt-3">
    <h1 class="text-center">Create Game</h1>
    <hr class="wiy chushka-bg-color height: 7px" />
    <form class="mx-auto half-width wiy" method="post" asp-controller="Games" asp-action="Create" enctype="multipart/form-data">
        <div class="row">
            <div class="form-group inline col-sm-6  text-center">
                <label asp-for="Name"><b>Title</b></label>
                <input asp-for="Name" type="text" class="form-control" placeholder="Name...">
            </div>
        </div>

        <div class="row">
            <div class="form-group  inline col-sm-12  text-center">
                <label asp-for="Description"><b>Description and recommendations</b></label>
                <textarea asp-for="Description" type="text" class="form-control" placeholder="Description..."></textarea>
            </div>
        </div>
        <div style="padding-top:70px;">
            <div class="row" @*style="padding-top:70px;" *@>
                <div class=" inline col-sm-1" style="padding-top:50px;"><h4>Level 1</h4></div>
                <div class="form-group inline col-sm-6  ">
                    <label asp-for="@Model.Level1.Description"><b>Description</b></label>
                    <textarea asp-for="@Model.Level1.Description" type="text" class="form-control" placeholder="Description..."></textarea>
                </div>
                <div class="form-group inline col-sm-1  text-center">
                    <label asp-for="@Model.Level1.Points"><b>points</b></label>
                    <input asp-for="@Model.Level1.Points" type="number" class="form-control" placeholder="Points...">
                </div>
                <div class="form-group inline col-sm-1">
                    <label asp-for="@Model.Level1.Image"></label>
                    <input asp-for="@Model.Level1.Image" type="file" onchange="readURL(this);" />
                    <img id="blah" src="#" alt="your image" />
                </div>
            </div>
        </div>
        <div style="padding-top:70px;">
            <div class="row" @*style="padding-top:70px;" *@>
                <div class="inline col-sm-1" style="padding-top:50px;"><h4>Level 2</h4></div>
                <div class="form-group inline col-sm-6  ">
                    <label asp-for="@Model.Level2.Description"><b>Description</b></label>
                    <textarea asp-for="@Model.Level2.Description" type="text" class="form-control" placeholder="Description..."></textarea>
                </div>
                <div class="form-group inline col-sm-1  text-center">
                    <label asp-for="@Model.Level2.Points"><b>points</b></label>
                    <input asp-for="@Model.Level2.Points" type="number" class="form-control" placeholder="Points...">
                </div>
                <div class="form-group inline col-sm-1">
                    <label asp-for="@Model.Level2.Image"></label>
                    <input asp-for="@Model.Level2.Image" type="file" onchange="readURL(this);" />
                    <img id="blah" src="#" alt="your image2" />
                </div>
            </div>
            </div>
            <div style="padding-top:70px;">
                <button type="submit">Create game</button>
            </div>
    </form>
    @*<div style="padding-left:800px; padding-top:200px;">
            @Html.PagedListPager((IPagedList)Model, page => Url.Action("All", new { page }))
        </div>*@



    @*<script>
            function openForm() {
                var number = document.getElementById("countOfLevels").value;
                var container = document.getElementById("container");
                //// Clear previous contents of the container
                //while (container.hasChildNodes()) {
                //    container.removeChild(container.lastChild);
            }
            for (var i = 0; i < number; i++) {

                // Append a node with a random text
                container.appendChild(document.createTextNode("Member " + (i + 1)));
                // Create an <input> element, set its type and name attributes
                var input = document.createElement("input");
            input.type = "text";
                input.name = "member" + i;
                container.appendChild(input);
                // Append a line break
                container.appendChild(document.createElement("br"));

              var rr = @{await Html.RenderPartialAsync("_LevelsPartial");}
                  $("#levels").add(rr);
            document.body.appendChild(n);
        }
        </script>*@
</main>
